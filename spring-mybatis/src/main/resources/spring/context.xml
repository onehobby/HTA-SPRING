<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- 
		database.properties 파일 읽기
	-->
	<context:property-placeholder location="classpath:/spring/config/database.properties"/>
	
	<!-- 
		DataSource bean 설정, Tip > class설정 시 DMDS + ctrl + space해서 자동완성
	--> 
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${db.driverClassName}"></property>
		<property name="url" value="${db.url}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
	</bean>
	
	<!-- 
		mybatis.util을 참고하여 SqlSessionFactory의 역할을 한번보자
	    mybatis 핵심객체인 SqlSessionFactory를 스프링의 bean으로 등록시키는
		SqlSessionFactoryBean을 <bean />로 정의한다.
			- configLocation : mybatis환경설정 파일의 경로를 설정한다.
			- mapperLocations : mapper 파일의 경로를 설정한다.
			- typeAliases : 별칭을 부여할 VO객체들을 설정한다.
			- typeAliasesPackage : 별칭을 부여할 VO객체들이 포함된 패키지를 설정한다.
			- dataSource : 커넥션풀을 제공하는 DataSource 객체의 bean 아이디를 설정한다.
	 -->
	 <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml"></property>
	 	<property name="dataSource" ref="dataSource"></property>
	 </bean>
	
	<!-- 
		<mybatis-spring:scan /> 태그는 base-package="패키지명" />
		지정된 패키지에서 매퍼 인터페이스(USerDao, BlogDao, BlogCommentDao)를 검색해서,
		매퍼 인스턴스(UserDao의 구현객체, BlogDao의 구현객체, BlogCommentDao의 구현객체)를 생성한다.
		생성된 매퍼인스턴스는 스프링 컨테이너의 빈으로 자동 등록된다.
		즉, 스프링 컨테이너에 UserDao/BlogDao/BlogCommentDao의 구현객체가
		등록/관리되고있는 것이다.
		- (매퍼 인터페이스 + 매퍼 파일) * (<mybatis-spring />) => 매퍼인스턴스(구현객체)
	 -->
	<mybatis-spring:scan base-package="kr.co.jhta.dao"/>
	
	<!-- 
		의존성 주입 및 기타 어노테이션을 감지/분석/처리하는 객체		
	 -->
	 <context:annotation-config />
	 
	 
	<!-- 
		지정된 패키지에서 클래스를 스캔해서 스프링 컨테이너의 빈으로 등록
		@Autowired나 @Resource 어노테이션이 있으면,
		해당 타입의 객체를 스프링컨테이너에서 찾아서 의존성 주입이 일어난다.
	 -->
	<context:component-scan base-package="kr.co.jhta.service" />
	
	
</beans>
